// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DaemonConfigurationStatus Response to a daemon configuration request. Contains the addressing
// information, k8s, node monitor and immutable and mutable configuration
// settings.
//
// swagger:model DaemonConfigurationStatus

type DaemonConfigurationStatus struct {

	// addressing
	Addressing *NodeAddressing `json:"addressing,omitempty"`

	// datapath mode
	DatapathMode *DaemonConfigurationStatusDatapathMode `json:"datapathMode,omitempty"`

	// MTU on workload facing devices
	DeviceMTU int64 `json:"deviceMTU,omitempty"`

	// Immutable configuration (read-only)
	Immutable ConfigurationMap `json:"immutable,omitempty"`

	// k8s configuration
	K8sConfiguration string `json:"k8s-configuration,omitempty"`

	// k8s endpoint
	K8sEndpoint string `json:"k8s-endpoint,omitempty"`

	// kvstore configuration
	KvstoreConfiguration *KVstoreConfiguration `json:"kvstoreConfiguration,omitempty"`

	// Status of the node monitor
	NodeMonitor *MonitorStatus `json:"nodeMonitor,omitempty"`

	// Currently applied configuration
	Realized *DaemonConfigurationSpec `json:"realized,omitempty"`

	// MTU for network facing routes
	RouteMTU int64 `json:"routeMTU,omitempty"`
}

/* polymorph DaemonConfigurationStatus addressing false */

/* polymorph DaemonConfigurationStatus datapathMode false */

/* polymorph DaemonConfigurationStatus deviceMTU false */

/* polymorph DaemonConfigurationStatus immutable false */

/* polymorph DaemonConfigurationStatus k8s-configuration false */

/* polymorph DaemonConfigurationStatus k8s-endpoint false */

/* polymorph DaemonConfigurationStatus kvstoreConfiguration false */

/* polymorph DaemonConfigurationStatus nodeMonitor false */

/* polymorph DaemonConfigurationStatus realized false */

/* polymorph DaemonConfigurationStatus routeMTU false */

// Validate validates this daemon configuration status
func (m *DaemonConfigurationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressing(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDatapathMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKvstoreConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeMonitor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRealized(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DaemonConfigurationStatus) validateAddressing(formats strfmt.Registry) error {

	if swag.IsZero(m.Addressing) { // not required
		return nil
	}

	if m.Addressing != nil {

		if err := m.Addressing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressing")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationStatus) validateDatapathMode(formats strfmt.Registry) error {

	if swag.IsZero(m.DatapathMode) { // not required
		return nil
	}

	if m.DatapathMode != nil {

		if err := m.DatapathMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datapathMode")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationStatus) validateKvstoreConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.KvstoreConfiguration) { // not required
		return nil
	}

	if m.KvstoreConfiguration != nil {

		if err := m.KvstoreConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvstoreConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationStatus) validateNodeMonitor(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeMonitor) { // not required
		return nil
	}

	if m.NodeMonitor != nil {

		if err := m.NodeMonitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeMonitor")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationStatus) validateRealized(formats strfmt.Registry) error {

	if swag.IsZero(m.Realized) { // not required
		return nil
	}

	if m.Realized != nil {

		if err := m.Realized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realized")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DaemonConfigurationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DaemonConfigurationStatus) UnmarshalBinary(b []byte) error {
	var res DaemonConfigurationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DaemonConfigurationStatusDatapathMode Datapath mode
// swagger:model DaemonConfigurationStatusDatapathMode

type DaemonConfigurationStatusDatapathMode struct {

	// attrs
	Attrs *DaemonConfigurationStatusDatapathModeAttrs `json:"attrs,omitempty"`

	// Name
	Name string `json:"name,omitempty"`
}

/* polymorph DaemonConfigurationStatusDatapathMode attrs false */

/* polymorph DaemonConfigurationStatusDatapathMode name false */

// Validate validates this daemon configuration status datapath mode
func (m *DaemonConfigurationStatusDatapathMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttrs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DaemonConfigurationStatusDatapathMode) validateAttrs(formats strfmt.Registry) error {

	if swag.IsZero(m.Attrs) { // not required
		return nil
	}

	if m.Attrs != nil {

		if err := m.Attrs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datapathMode" + "." + "attrs")
			}
			return err
		}
	}

	return nil
}

var daemonConfigurationStatusDatapathModeTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["veth","ipvlan"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		daemonConfigurationStatusDatapathModeTypeNamePropEnum = append(daemonConfigurationStatusDatapathModeTypeNamePropEnum, v)
	}
}

const (
	// DaemonConfigurationStatusDatapathModeNameVeth captures enum value "veth"
	DaemonConfigurationStatusDatapathModeNameVeth string = "veth"
	// DaemonConfigurationStatusDatapathModeNameIpvlan captures enum value "ipvlan"
	DaemonConfigurationStatusDatapathModeNameIpvlan string = "ipvlan"
)

// prop value enum
func (m *DaemonConfigurationStatusDatapathMode) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, daemonConfigurationStatusDatapathModeTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DaemonConfigurationStatusDatapathMode) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("datapathMode"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DaemonConfigurationStatusDatapathMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DaemonConfigurationStatusDatapathMode) UnmarshalBinary(b []byte) error {
	var res DaemonConfigurationStatusDatapathMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DaemonConfigurationStatusDatapathModeAttrs Attributes
// swagger:model DaemonConfigurationStatusDatapathModeAttrs

type DaemonConfigurationStatusDatapathModeAttrs struct {

	// Master device ifindex (only for ipvlan)
	MasterDevIfIndex int64 `json:"masterDevIfIndex,omitempty"`
}

/* polymorph DaemonConfigurationStatusDatapathModeAttrs masterDevIfIndex false */

// Validate validates this daemon configuration status datapath mode attrs
func (m *DaemonConfigurationStatusDatapathModeAttrs) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *DaemonConfigurationStatusDatapathModeAttrs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DaemonConfigurationStatusDatapathModeAttrs) UnmarshalBinary(b []byte) error {
	var res DaemonConfigurationStatusDatapathModeAttrs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
